
================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\index.js
================================================================================
import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import dotenv from 'dotenv';
import authRoutes from './routes/auth.js';
import recommendationRoutes from './routes/recommendations.js';

import laptopRoutes from './routes/laptops.js'; // Note the `.js` extension is required in ESM
console.log('JWT Secret:', process.env.JWT_SECRET);

dotenv.config();

const app = express();

app.use(cors());
app.use(express.json());
app.use("/api/auth", authRoutes);
app.use('/api/recommendations', recommendationRoutes);

// MongoDB connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('‚úÖ MongoDB connected successfully'))
.catch((err) => console.error('‚ùå MongoDB connection error:', err));

// Routes
app.use('/api/laptops', laptopRoutes);

// Server start
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`üöÄ Server running at http://localhost:${PORT}`);
});


================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\controllers\recommendationLogController.js
================================================================================
// controllers/recommendationLogController.js
import RecommendationLog from "../models/RecommendationLog.js";

export const autoLogRecommendation = async (req, res) => {
  try {
    const { userId, preferencesSource, preferences, recommendedLaptops } = req.body;
    if (!preferencesSource || !preferences || !recommendedLaptops)
      return res.status(400).json({ error: "Missing required fields" });

    const log = new RecommendationLog({
      userId: userId || "guest",
      preferencesSource,
      preferences,
      recommendedLaptops,
    });
    await log.save();

    res.status(201).json({ message: "Recommendation log saved", log });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\controllers\savedLaptopController.js
================================================================================
// controllers/savedLaptopController.js
import SavedLaptop from "../models/SavedLaptop.js";

// POST /api/saved-laptops
export const saveLaptop = async (req, res) => {
  try {
    const userId = req.user._id; // set by auth middleware
    const { laptop, preferences, preferencesSource } = req.body;

    if (!laptop || !preferences)
      return res.status(400).json({ error: "Missing required fields" });

    const saved = new SavedLaptop({
      userId,
      laptop,
      preferences,
      preferencesSource: preferencesSource || "basic",
    });
    await saved.save();

    res.status(201).json({ message: "Laptop saved", saved });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// GET /api/saved-laptops
export const getSavedLaptops = async (req, res) => {
  try {
    const userId = req.user._id;
    const laptops = await SavedLaptop.find({ userId });
    res.json(laptops);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// DELETE /api/saved-laptops/:id
export const deleteSavedLaptop = async (req, res) => {
  try {
    const userId = req.user._id;
    const { id } = req.params;

    const deleted = await SavedLaptop.findOneAndDelete({ _id: id, userId });
    if (!deleted) return res.status(404).json({ error: "Laptop not found or not yours" });

    res.json({ message: "Laptop removed", deleted });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\middleware\auth.js
================================================================================
// middleware/auth.js
import jwt from "jsonwebtoken";
import User from "../models/User.js";

export const authMiddleware = async (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ error: "No token" });

  const token = authHeader.split(" ")[1];
  try {
    const payload = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await User.findById(payload.userId);
    if (!req.user) return res.status(401).json({ error: "User not found" });
    next();
  } catch {
    res.status(401).json({ error: "Invalid token" });
  }
};


================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\middleware\authMiddleware.js
================================================================================
// At the top of your backend file
const JWT_SECRET = process.env.JWT_SECRET || "keyboardcat";

import jwt from "jsonwebtoken";


export const requireAuth = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ error: "No token provided." });

  const token = authHeader.split(" ")[1];
  if (!token) return res.status(401).json({ error: "Malformed token." });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    res.status(401).json({ error: "Invalid or expired token." });
  }
};


================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\models\Laptop.js
================================================================================
import mongoose from 'mongoose';

const LaptopSchema = new mongoose.Schema({
  name: String,
  specs: String,
  price: String,
  image: String,
  storeLink: String,
  reason: String,

  // Optional but still supported
  savedBy: String,

  // üÜï Added Fields
  preferencesSource: {
    type: String,
    enum: ['text', 'basic', 'advanced'],
    required: true,
  },
  preferences: {
    type: mongoose.Schema.Types.Mixed, // Accepts object (flexible schema)
    required: true,
  },
  userId: {
    type: String,
    required: true,
  },

  createdAt: {
    type: Date,
    default: Date.now,
  },
});

const Laptop = mongoose.model('Laptop', LaptopSchema);
export default Laptop;


================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\models\RecommendationLog.js
================================================================================
// models/RecommendationLog.js

import mongoose from 'mongoose';

/**
 * @typedef {Object} RecommendationLog
 * @property {mongoose.Types.ObjectId|null} userId - Linked user ID (null if guest).
 * @property {string} preferencesSource - Source of preferences: 'text', 'basic', or 'advanced'.
 * @property {Object} preferences - The user‚Äôs input/preferences for this session.
 * @property {Array<Object>} recommendedLaptops - Array of recommended laptop objects.
 * @property {Date} createdAt - Log creation time (auto-added).
 * @property {Date} updatedAt - Log update time (auto-added).
 */

/**
 * Schema for storing recommendation sessions and results.
 */
const RecommendationLogSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      default: null, // Null for guests, ObjectId for registered users
    },
    preferencesSource: {
      type: String,
      enum: ['text', 'basic', 'advanced'],
      required: true,
    },
    preferences: {
      type: mongoose.Schema.Types.Mixed,
      required: true,
    },
    recommendedLaptops: {
      type: [mongoose.Schema.Types.Mixed],
      required: true,
    },
  },
  { timestamps: true }
);

// üîç Add index for faster queries by user
RecommendationLogSchema.index({ userId: 1 });

export default mongoose.model('RecommendationLog', RecommendationLogSchema);


================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\models\Savedlaptops.js
================================================================================
// models/SavedLaptop.js

import mongoose from "mongoose";

/**
 * @typedef {Object} SavedLaptop
 * @property {mongoose.Types.ObjectId} userId - The user who saved this laptop.
 * @property {Object} laptop - The laptop object/data.
 * @property {Object} preferences - Preferences used at the time of saving.
 * @property {string} preferencesSource - 'basic', 'advanced', or 'text'.
 * @property {Date} savedAt - When the laptop was saved.
 */

/**
 * Schema for user-saved laptops and context.
 */
const SavedLaptopSchema = new mongoose.Schema(
  {
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    laptop: { type: mongoose.Schema.Types.Mixed, required: true },
    preferences: { type: mongoose.Schema.Types.Mixed, required: true },
    preferencesSource: { type: String, enum: ['basic', 'advanced', 'text'], default: 'basic' }
  },
  { timestamps: { createdAt: 'savedAt' } }
);

// Optional: To prevent duplicate saves per user (uncomment one as fits your data):
// SavedLaptopSchema.index({ userId: 1, 'laptop.id': 1 }, { unique: true });
// or, if you don‚Äôt have .id in each laptop, you could use 'laptop.name'

// Export the model
export default mongoose.model("SavedLaptop", SavedLaptopSchema);


================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\models\User.js
================================================================================
import mongoose from "mongoose";
import bcrypt from "bcryptjs";

const UserSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true, lowercase: true },
  password: { type: String, required: true },
  name: { type: String },
  createdAt: { type: Date, default: Date.now }
});

// Hash password before saving
UserSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// Compare password for login
UserSchema.methods.comparePassword = function (candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

export default mongoose.model("User", UserSchema);


================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\routes\auth.js
================================================================================
import express from "express";
import User from "../models/User.js";
import jwt from "jsonwebtoken";

const router = express.Router();
const JWT_SECRET = process.env.JWT_SECRET || "keyboardcat";


// Register route
router.post("/register", async (req, res) => {
  try {
    const { email, password, name } = req.body;
    if (!email || !password) return res.status(400).json({ message: "Email and password required." });

    const exists = await User.findOne({ email });
    if (exists) return res.status(409).json({ message: "Email already registered." });

    const user = new User({ email, password, name });
    await user.save();
    res.status(201).json({ message: "Registration successful!" });
  } catch (err) {
    res.status(500).json({ message: "Server error", error: err.message });
  }
});

// Login route
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(401).json({ message: "Invalid credentials." });

    const isMatch = await user.comparePassword(password);
    if (!isMatch) return res.status(401).json({ message: "Invalid credentials." });

    // Create JWT
    const token = jwt.sign({ userId: user._id, email: user.email }, JWT_SECRET, { expiresIn: "2h" });

    // For demo: send token as cookie or in response
    res.status(200).json({ token, user: { _id: user._id, email: user.email, name: user.name } });
  } catch (err) {
    res.status(500).json({ message: "Server error", error: err.message });
  }
});

export default router;


================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\routes\laptops.js
================================================================================
import express from 'express';
import Laptop from '../models/Laptop.js';

const router = express.Router();

// GET all saved laptops
router.get('/', async (req, res) => {
  try {
    const laptops = await Laptop.find().sort({ createdAt: -1 });
    res.status(200).json(laptops);
  } catch (error) {
    console.error('Fetch error:', error);
    res.status(500).json({ success: false, message: 'Failed to fetch laptops' });
  }
});

// POST a new laptop with preferences and user info
router.post('/', async (req, res) => {
  try {
    const {
      name,
      specs,
      price,
      image,
      storeLink,
      reason,
      preferencesSource,
      preferences,
      userId
    } = req.body;

    if (!preferences || !preferencesSource || !userId) {
      return res.status(401).json({ success: false, message: 'Login required or missing info' });
    }

    const newLaptop = new Laptop({
      name,
      specs,
      price,
      image,
      storeLink,
      reason,
      preferencesSource,
      preferences,
      userId
    });

    await newLaptop.save();
    res.status(201).json({ success: true, message: 'Laptop saved successfully', laptop: newLaptop });
  } catch (error) {
    console.error('Save error:', error);
    res.status(500).json({ success: false, message: 'Server error', error });
  }
});

// DELETE laptop by ID
router.delete('/:id', async (req, res) => {
  try {
    const result = await Laptop.findByIdAndDelete(req.params.id);
    if (!result) {
      return res.status(404).json({ success: false, message: 'Laptop not found' });
    }
    res.status(200).json({ success: true, message: 'Laptop deleted' });
  } catch (error) {
    console.error('Delete error:', error);
    res.status(500).json({ success: false, message: 'Failed to delete laptop', error });
  }
});

export default router;


================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\routes\recommendations.js
================================================================================
// routes/recommendations.js
import express from 'express';
import RecommendationLog from '../models/RecommendationLog.js';
import mongoose from 'mongoose';

const router = express.Router();

/**
 * @route   POST /api/recommendations/auto-log
 * @desc    Automatically log a recommendation event
 * @body    { userId, preferencesSource, preferences, recommendedLaptops }
 */
router.post('/auto-log', async (req, res) => {
  try {
    let { userId = null, preferencesSource, preferences, recommendedLaptops } = req.body;

    // Validate presence of all required fields
    if (!preferencesSource)
      return res.status(400).json({ error: 'Missing required field: preferencesSource' });
    if (!preferences)
      return res.status(400).json({ error: 'Missing required field: preferences' });
    if (!recommendedLaptops)
      return res.status(400).json({ error: 'Missing required field: recommendedLaptops' });

    // If userId is a string but looks like ObjectId, convert
    if (userId && typeof userId === "string" && mongoose.isValidObjectId(userId)) {
      userId = new mongoose.Types.ObjectId(userId);
    }
    // For guests: keep as null

    const log = await RecommendationLog.create({
      userId,
      preferencesSource,
      preferences,
      recommendedLaptops,
    });

    res.status(201).json({ message: 'Recommendation log saved successfully', log });
  } catch (error) {
    console.error('Auto-save error:', error);
    res.status(500).json({ error: 'Failed to save recommendation log' });
  }
});

/**
 * @route   GET /api/recommendations/user/:userId
 * @desc    Get all recommendation logs for a user (for dashboard/analytics)
 */
router.get('/user/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    if (!mongoose.isValidObjectId(userId)) {
      return res.status(400).json({ error: 'Invalid userId' });
    }
    const logs = await RecommendationLog.find({ userId }).sort({ createdAt: -1 });
    res.json({ logs });
  } catch (error) {
    console.error('Fetch error:', error);
    res.status(500).json({ error: 'Failed to fetch logs' });
  }
});

export default router;


================================================================================
// File: C:\Users\Administrator\Desktop\laptopia\backend\routes\savedLaptops.js
================================================================================
// routes/savedLaptops.js
import express from "express";
import {
  saveLaptop,
  getSavedLaptops,
  deleteSavedLaptop,
} from "../controllers/savedLaptopController.js";
import { authMiddleware } from "../middleware/auth.js";

const router = express.Router();

router.post("/", authMiddleware, saveLaptop);
router.get("/", authMiddleware, getSavedLaptops);
router.delete("/:id", authMiddleware, deleteSavedLaptop);

export default router;

